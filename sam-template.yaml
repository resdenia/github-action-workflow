AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: "This is an AWS Lambda function for shipping logs from S3 bucket. It triggers when a new file is being added to your chosen bucket."
Parameters:
  logzioToken:
    Type: String
    Description: "Your Logz.io log shipping token."
    MinLength: 1
  logzioListener:
    Type: String
    Description: >-
      The Logz.io listener URL fot your region. (For more details, see the regions page: 
      https://docs.logz.io/user-guide/accounts/account-region.html)
    Default: 'https://listener.logz.io:8071'
    AllowedValues:
      - 'https://listener.logz.io:8071'
      - 'https://listener-au.logz.io:8071'
      - 'https://listener-ca.logz.io:8071'
      - 'https://listener-eu.logz.io:8071'
      - 'https://listener-nl.logz.io:8071'
      - 'https://listener-uk.logz.io:8071'
      - 'https://listener-wa.logz.io:8071'
  logType:
    Type: String
    Description: >-
      The log type you'll use with this Lambda. This is shown in your logs under the type field in Kibana.
      Logz.io applies parsing based on type.
    Default: s3_hook
  logLevel:
    Type: String
    Description: "Log level for the Lambda function. Can be one of: debug, info, warn, error, fatal, panic."
    Default: info
    AllowedValues:
      - debug
      - info
      - warn
      - error
      - fatal
      - panic
  pathsRegexes:
    Type: String
    Description: "Comma-seperated list of regex that match the paths you'd like to pull logs from."
  pathToFields:
    Type: String
    Description: "Fields from the path to your logs directory that you want to add to the logs. For example, `org-id/aws-type/account-id` will add each of the fields `org-id`, `aws-type` and `account-id` to the logs that are fetched from the directory that this path refers to."
Outputs:
  LogzioS3HookLambda:
    Description: "Logz.io S3 hook lambda ARN"
    Value: !GetAtt LogzioS3HookLambda.Arn

Resources:
  LogzioS3HookLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: go1.x
      Handler: main
      CodeUri:
        Bucket: logzio-aws-integrations-<<REGION>>
        Key: s3-hook/<<VERSION>>/function.zip
      FunctionName: !Ref AWS::StackName
      MemorySize: 512
      Timeout: 60
      Role: !GetAtt S3HookIamRole.Arn
      Environment:
        Variables:
          LOGZIO_TOKEN: !Ref logzioToken
          LOGZIO_LISTENER: !Ref logzioListener
          LOG_TYPE: !Ref logType
          LOG_LEVEL: !Ref logLevel
          PATHS_REGEXES: !Ref pathsRegexes
          PATH_TO_FIELDS: !Ref pathToFields
  S3HookIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join ['-', ['LogzioS3Hook', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join ['-', ['logzioS3Hook', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 'logs:CreateLogGroup'
                Resource:
                  - !Sub 'arn:aws:s3:::*'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'